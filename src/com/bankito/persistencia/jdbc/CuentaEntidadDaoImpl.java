/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.bankito.persistencia.jdbc;

import com.bankito.persistencia.dao.*;
import com.bankito.persistencia.factory.*;
import java.util.Date;
import com.bankito.persistencia.dto.*;
import com.bankito.persistencia.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CuentaEntidadDaoImpl extends AbstractDAO implements CuentaEntidadDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_cuenta, num_entidad, num_sucursal, num_digito_control, num_cuenta, saldo, fecha_creacion, usuario_id_usuario FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_cuenta, num_entidad, num_sucursal, num_digito_control, num_cuenta, saldo, fecha_creacion, usuario_id_usuario ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_cuenta = ?, num_entidad = ?, num_sucursal = ?, num_digito_control = ?, num_cuenta = ?, saldo = ?, fecha_creacion = ?, usuario_id_usuario = ? WHERE id_cuenta = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_cuenta = ?";

	/** 
	 * Index of column id_cuenta
	 */
	protected static final int COLUMN_ID_CUENTA = 1;

	/** 
	 * Index of column num_entidad
	 */
	protected static final int COLUMN_NUM_ENTIDAD = 2;

	/** 
	 * Index of column num_sucursal
	 */
	protected static final int COLUMN_NUM_SUCURSAL = 3;

	/** 
	 * Index of column num_digito_control
	 */
	protected static final int COLUMN_NUM_DIGITO_CONTROL = 4;

	/** 
	 * Index of column num_cuenta
	 */
	protected static final int COLUMN_NUM_CUENTA = 5;

	/** 
	 * Index of column saldo
	 */
	protected static final int COLUMN_SALDO = 6;

	/** 
	 * Index of column fecha_creacion
	 */
	protected static final int COLUMN_FECHA_CREACION = 7;

	/** 
	 * Index of column usuario_id_usuario
	 */
	protected static final int COLUMN_USUARIO_ID_USUARIO = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 8;

	/** 
	 * Index of primary-key column id_cuenta
	 */
	protected static final int PK_COLUMN_ID_CUENTA = 1;

	/** 
	 * Inserts a new row in the cuenta table.
	 */
	public CuentaEntidadPk insert(CuentaEntidad dto) throws CuentaEntidadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdCuenta() );
			stmt.setInt( index++, dto.getNumEntidad() );
			stmt.setInt( index++, dto.getNumSucursal() );
			stmt.setInt( index++, dto.getNumDigitoControl() );
			stmt.setLong( index++, dto.getNumCuenta() );
			stmt.setFloat( index++, dto.getSaldo() );
			stmt.setTimestamp(index++, dto.getFechaCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaCreacion().getTime() ) );
			stmt.setInt( index++, dto.getUsuarioIdUsuario() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdCuenta( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cuenta table.
	 */
	public void update(CuentaEntidadPk pk, CuentaEntidad dto) throws CuentaEntidadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdCuenta() );
			stmt.setInt( index++, dto.getNumEntidad() );
			stmt.setInt( index++, dto.getNumSucursal() );
			stmt.setInt( index++, dto.getNumDigitoControl() );
			stmt.setLong( index++, dto.getNumCuenta() );
			stmt.setFloat( index++, dto.getSaldo() );
			stmt.setTimestamp(index++, dto.getFechaCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaCreacion().getTime() ) );
			stmt.setInt( index++, dto.getUsuarioIdUsuario() );
			stmt.setInt( 9, pk.getIdCuenta() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cuenta table.
	 */
	public void delete(CuentaEntidadPk pk) throws CuentaEntidadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdCuenta() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cuenta table that matches the specified primary-key value.
	 */
	public CuentaEntidad findByPrimaryKey(CuentaEntidadPk pk) throws CuentaEntidadDaoException
	{
		return findByPrimaryKey( pk.getIdCuenta() );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'id_cuenta = :idCuenta'.
	 */
	public CuentaEntidad findByPrimaryKey(int idCuenta) throws CuentaEntidadDaoException
	{
		CuentaEntidad ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_cuenta = ?", new Object[] {  new Integer(idCuenta) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria ''.
	 */
	public CuentaEntidad[] findAll() throws CuentaEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_cuenta", null );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'usuario_id_usuario = :usuarioIdUsuario'.
	 */
	public CuentaEntidad[] findByUsuario(int usuarioIdUsuario) throws CuentaEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE usuario_id_usuario = ?", new Object[] {  new Integer(usuarioIdUsuario) } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'id_cuenta = :idCuenta'.
	 */
	public CuentaEntidad[] findWhereIdCuentaEquals(int idCuenta) throws CuentaEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_cuenta = ? ORDER BY id_cuenta", new Object[] {  new Integer(idCuenta) } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'num_entidad = :numEntidad'.
	 */
	public CuentaEntidad[] findWhereNumEntidadEquals(int numEntidad) throws CuentaEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE num_entidad = ? ORDER BY num_entidad", new Object[] {  new Integer(numEntidad) } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'num_sucursal = :numSucursal'.
	 */
	public CuentaEntidad[] findWhereNumSucursalEquals(int numSucursal) throws CuentaEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE num_sucursal = ? ORDER BY num_sucursal", new Object[] {  new Integer(numSucursal) } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'num_digito_control = :numDigitoControl'.
	 */
	public CuentaEntidad[] findWhereNumDigitoControlEquals(int numDigitoControl) throws CuentaEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE num_digito_control = ? ORDER BY num_digito_control", new Object[] {  new Integer(numDigitoControl) } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'num_cuenta = :numCuenta'.
	 */
	public CuentaEntidad[] findWhereNumCuentaEquals(long numCuenta) throws CuentaEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE num_cuenta = ? ORDER BY num_cuenta", new Object[] {  new Long(numCuenta) } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'saldo = :saldo'.
	 */
	public CuentaEntidad[] findWhereSaldoEquals(float saldo) throws CuentaEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE saldo = ? ORDER BY saldo", new Object[] {  new Float(saldo) } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'fecha_creacion = :fechaCreacion'.
	 */
	public CuentaEntidad[] findWhereFechaCreacionEquals(Date fechaCreacion) throws CuentaEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_creacion = ? ORDER BY fecha_creacion", new Object[] { fechaCreacion==null ? null : new java.sql.Timestamp( fechaCreacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'usuario_id_usuario = :usuarioIdUsuario'.
	 */
	public CuentaEntidad[] findWhereUsuarioIdUsuarioEquals(int usuarioIdUsuario) throws CuentaEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE usuario_id_usuario = ? ORDER BY usuario_id_usuario", new Object[] {  new Integer(usuarioIdUsuario) } );
	}

	/**
	 * Method 'CuentaEntidadDaoImpl'
	 * 
	 */
	public CuentaEntidadDaoImpl()
	{
	}

	/**
	 * Method 'CuentaEntidadDaoImpl'
	 * 
	 * @param userConn
	 */
	public CuentaEntidadDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "bankito.cuenta";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected CuentaEntidad fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			CuentaEntidad dto = new CuentaEntidad();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected CuentaEntidad[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			CuentaEntidad dto = new CuentaEntidad();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		CuentaEntidad ret[] = new CuentaEntidad[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(CuentaEntidad dto, ResultSet rs) throws SQLException
	{
		dto.setIdCuenta( rs.getInt( COLUMN_ID_CUENTA ) );
		dto.setNumEntidad( rs.getInt( COLUMN_NUM_ENTIDAD ) );
		dto.setNumSucursal( rs.getInt( COLUMN_NUM_SUCURSAL ) );
		dto.setNumDigitoControl( rs.getInt( COLUMN_NUM_DIGITO_CONTROL ) );
		dto.setNumCuenta( rs.getLong( COLUMN_NUM_CUENTA ) );
		dto.setSaldo( rs.getFloat( COLUMN_SALDO ) );
		dto.setFechaCreacion( rs.getTimestamp(COLUMN_FECHA_CREACION ) );
		dto.setUsuarioIdUsuario( rs.getInt( COLUMN_USUARIO_ID_USUARIO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(CuentaEntidad dto)
	{
	}

	/** 
	 * Returns all rows from the cuenta table that match the specified arbitrary SQL statement
	 */
	public CuentaEntidad[] findByDynamicSelect(String sql, Object[] sqlParams) throws CuentaEntidadDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cuenta table that match the specified arbitrary SQL statement
	 */
	public CuentaEntidad[] findByDynamicWhere(String sql, Object[] sqlParams) throws CuentaEntidadDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CuentaEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
