/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.bankito.persistencia.jdbc;

import com.bankito.persistencia.dao.*;
import com.bankito.persistencia.factory.*;
import java.util.Date;
import com.bankito.persistencia.dto.*;
import com.bankito.persistencia.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class MovimientoEntidadDaoImpl extends AbstractDAO implements MovimientoEntidadDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_movimiento, concepto, tipo, importe, fecha_creacion, cuenta_id_cuenta FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_movimiento, concepto, tipo, importe, fecha_creacion, cuenta_id_cuenta ) VALUES ( ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_movimiento = ?, concepto = ?, tipo = ?, importe = ?, fecha_creacion = ?, cuenta_id_cuenta = ? WHERE id_movimiento = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_movimiento = ?";

	/** 
	 * Index of column id_movimiento
	 */
	protected static final int COLUMN_ID_MOVIMIENTO = 1;

	/** 
	 * Index of column concepto
	 */
	protected static final int COLUMN_CONCEPTO = 2;

	/** 
	 * Index of column tipo
	 */
	protected static final int COLUMN_TIPO = 3;

	/** 
	 * Index of column importe
	 */
	protected static final int COLUMN_IMPORTE = 4;

	/** 
	 * Index of column fecha_creacion
	 */
	protected static final int COLUMN_FECHA_CREACION = 5;

	/** 
	 * Index of column cuenta_id_cuenta
	 */
	protected static final int COLUMN_CUENTA_ID_CUENTA = 6;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 6;

	/** 
	 * Index of primary-key column id_movimiento
	 */
	protected static final int PK_COLUMN_ID_MOVIMIENTO = 1;

	/** 
	 * Inserts a new row in the movimiento table.
	 */
	public MovimientoEntidadPk insert(MovimientoEntidad dto) throws MovimientoEntidadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdMovimiento() );
			stmt.setString( index++, dto.getConcepto() );
			stmt.setString( index++, dto.getTipo() );
			stmt.setFloat( index++, dto.getImporte() );
			stmt.setTimestamp(index++, dto.getFechaCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaCreacion().getTime() ) );
			stmt.setInt( index++, dto.getCuentaIdCuenta() );
//			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
//			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdMovimiento( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MovimientoEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the movimiento table.
	 */
	public void update(MovimientoEntidadPk pk, MovimientoEntidad dto) throws MovimientoEntidadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
//			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdMovimiento() );
			stmt.setString( index++, dto.getConcepto() );
			stmt.setString( index++, dto.getTipo() );
			stmt.setFloat( index++, dto.getImporte() );
			stmt.setTimestamp(index++, dto.getFechaCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaCreacion().getTime() ) );
			stmt.setInt( index++, dto.getCuentaIdCuenta() );
			stmt.setInt( 7, pk.getIdMovimiento() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
//			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MovimientoEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the movimiento table.
	 */
	public void delete(MovimientoEntidadPk pk) throws MovimientoEntidadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
//			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdMovimiento() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
//			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MovimientoEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the movimiento table that matches the specified primary-key value.
	 */
	public MovimientoEntidad findByPrimaryKey(MovimientoEntidadPk pk) throws MovimientoEntidadDaoException
	{
		return findByPrimaryKey( pk.getIdMovimiento() );
	}

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'id_movimiento = :idMovimiento'.
	 */
	public MovimientoEntidad findByPrimaryKey(int idMovimiento) throws MovimientoEntidadDaoException
	{
		MovimientoEntidad ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_movimiento = ?", new Object[] {  new Integer(idMovimiento) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the movimiento table that match the criteria ''.
	 */
	public MovimientoEntidad[] findAll() throws MovimientoEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_movimiento", null );
	}

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'cuenta_id_cuenta = :cuentaIdCuenta'.
	 */
	public MovimientoEntidad[] findByCuenta(int cuentaIdCuenta) throws MovimientoEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cuenta_id_cuenta = ?", new Object[] {  new Integer(cuentaIdCuenta) } );
	}

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'id_movimiento = :idMovimiento'.
	 */
	public MovimientoEntidad[] findWhereIdMovimientoEquals(int idMovimiento) throws MovimientoEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_movimiento = ? ORDER BY id_movimiento", new Object[] {  new Integer(idMovimiento) } );
	}

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'concepto = :concepto'.
	 */
	public MovimientoEntidad[] findWhereConceptoEquals(String concepto) throws MovimientoEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE concepto = ? ORDER BY concepto", new Object[] { concepto } );
	}

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'tipo = :tipo'.
	 */
	public MovimientoEntidad[] findWhereTipoEquals(String tipo) throws MovimientoEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipo = ? ORDER BY tipo", new Object[] { tipo } );
	}

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'importe = :importe'.
	 */
	public MovimientoEntidad[] findWhereImporteEquals(float importe) throws MovimientoEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE importe = ? ORDER BY importe", new Object[] {  new Float(importe) } );
	}

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'fecha_creacion = :fechaCreacion'.
	 */
	public MovimientoEntidad[] findWhereFechaCreacionEquals(Date fechaCreacion) throws MovimientoEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_creacion = ? ORDER BY fecha_creacion", new Object[] { fechaCreacion==null ? null : new java.sql.Timestamp( fechaCreacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'cuenta_id_cuenta = :cuentaIdCuenta'.
	 */
	public MovimientoEntidad[] findWhereCuentaIdCuentaEquals(int cuentaIdCuenta) throws MovimientoEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cuenta_id_cuenta = ? ORDER BY cuenta_id_cuenta", new Object[] {  new Integer(cuentaIdCuenta) } );
	}

	/**
	 * Method 'MovimientoEntidadDaoImpl'
	 * 
	 */
	public MovimientoEntidadDaoImpl()
	{
	}

	/**
	 * Method 'MovimientoEntidadDaoImpl'
	 * 
	 * @param userConn
	 */
	public MovimientoEntidadDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "bankito.movimiento";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected MovimientoEntidad fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			MovimientoEntidad dto = new MovimientoEntidad();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected MovimientoEntidad[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			MovimientoEntidad dto = new MovimientoEntidad();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		MovimientoEntidad ret[] = new MovimientoEntidad[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(MovimientoEntidad dto, ResultSet rs) throws SQLException
	{
		dto.setIdMovimiento( rs.getInt( COLUMN_ID_MOVIMIENTO ) );
		dto.setConcepto( rs.getString( COLUMN_CONCEPTO ) );
		dto.setTipo( rs.getString( COLUMN_TIPO ) );
		dto.setImporte( rs.getFloat( COLUMN_IMPORTE ) );
		dto.setFechaCreacion( rs.getTimestamp(COLUMN_FECHA_CREACION ) );
		dto.setCuentaIdCuenta( rs.getInt( COLUMN_CUENTA_ID_CUENTA ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(MovimientoEntidad dto)
	{
	}

	/** 
	 * Returns all rows from the movimiento table that match the specified arbitrary SQL statement
	 */
	public MovimientoEntidad[] findByDynamicSelect(String sql, Object[] sqlParams) throws MovimientoEntidadDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
//			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MovimientoEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the movimiento table that match the specified arbitrary SQL statement
	 */
	public MovimientoEntidad[] findByDynamicWhere(String sql, Object[] sqlParams) throws MovimientoEntidadDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
//			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MovimientoEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
