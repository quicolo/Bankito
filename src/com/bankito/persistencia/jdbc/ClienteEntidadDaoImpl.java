/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.bankito.persistencia.jdbc;

import com.bankito.persistencia.dao.*;
import com.bankito.persistencia.factory.*;
import java.util.Date;
import com.bankito.persistencia.dto.*;
import com.bankito.persistencia.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ClienteEntidadDaoImpl extends AbstractDAO implements ClienteEntidadDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT id_cliente, nombre, apellido1, apellido2, NIF, direccion_completa, fecha_creacion, fecha_modificacion, usuario_id_usuario FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( id_cliente, nombre, apellido1, apellido2, NIF, direccion_completa, fecha_creacion, fecha_modificacion, usuario_id_usuario ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET id_cliente = ?, nombre = ?, apellido1 = ?, apellido2 = ?, NIF = ?, direccion_completa = ?, fecha_creacion = ?, fecha_modificacion = ?, usuario_id_usuario = ? WHERE id_cliente = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE id_cliente = ?";

	/** 
	 * Index of column id_cliente
	 */
	protected static final int COLUMN_ID_CLIENTE = 1;

	/** 
	 * Index of column nombre
	 */
	protected static final int COLUMN_NOMBRE = 2;

	/** 
	 * Index of column apellido1
	 */
	protected static final int COLUMN_APELLIDO1 = 3;

	/** 
	 * Index of column apellido2
	 */
	protected static final int COLUMN_APELLIDO2 = 4;

	/** 
	 * Index of column NIF
	 */
	protected static final int COLUMN_NIF = 5;

	/** 
	 * Index of column direccion_completa
	 */
	protected static final int COLUMN_DIRECCION_COMPLETA = 6;

	/** 
	 * Index of column fecha_creacion
	 */
	protected static final int COLUMN_FECHA_CREACION = 7;

	/** 
	 * Index of column fecha_modificacion
	 */
	protected static final int COLUMN_FECHA_MODIFICACION = 8;

	/** 
	 * Index of column usuario_id_usuario
	 */
	protected static final int COLUMN_USUARIO_ID_USUARIO = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column id_cliente
	 */
	protected static final int PK_COLUMN_ID_CLIENTE = 1;

	/** 
	 * Inserts a new row in the cliente table.
	 */
	public ClienteEntidadPk insert(ClienteEntidad dto) throws ClienteEntidadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdCliente() );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getApellido1() );
			stmt.setString( index++, dto.getApellido2() );
			stmt.setString( index++, dto.getNif() );
			stmt.setString( index++, dto.getDireccionCompleta() );
			stmt.setTimestamp(index++, dto.getFechaCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaCreacion().getTime() ) );
			stmt.setTimestamp(index++, dto.getFechaModificacion()==null ? null : new java.sql.Timestamp( dto.getFechaModificacion().getTime() ) );
			stmt.setInt( index++, dto.getUsuarioIdUsuario() );
			//System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
//			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdCliente( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClienteEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the cliente table.
	 */
	public void update(ClienteEntidadPk pk, ClienteEntidad dto) throws ClienteEntidadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdCliente() );
			stmt.setString( index++, dto.getNombre() );
			stmt.setString( index++, dto.getApellido1() );
			stmt.setString( index++, dto.getApellido2() );
			stmt.setString( index++, dto.getNif() );
			stmt.setString( index++, dto.getDireccionCompleta() );
			stmt.setTimestamp(index++, dto.getFechaCreacion()==null ? null : new java.sql.Timestamp( dto.getFechaCreacion().getTime() ) );
			stmt.setTimestamp(index++, dto.getFechaModificacion()==null ? null : new java.sql.Timestamp( dto.getFechaModificacion().getTime() ) );
			stmt.setInt( index++, dto.getUsuarioIdUsuario() );
			stmt.setInt( 10, pk.getIdCliente() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
//			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClienteEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the cliente table.
	 */
	public void delete(ClienteEntidadPk pk) throws ClienteEntidadDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			//System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdCliente() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
//			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClienteEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the cliente table that matches the specified primary-key value.
	 */
	public ClienteEntidad findByPrimaryKey(ClienteEntidadPk pk) throws ClienteEntidadDaoException
	{
		return findByPrimaryKey( pk.getIdCliente() );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'id_cliente = :idCliente'.
	 */
	public ClienteEntidad findByPrimaryKey(int idCliente) throws ClienteEntidadDaoException
	{
		ClienteEntidad ret[] = findByDynamicSelect( SQL_SELECT + " WHERE id_cliente = ?", new Object[] {  new Integer(idCliente) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria ''.
	 */
	public ClienteEntidad[] findAll() throws ClienteEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY id_cliente", null );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'usuario_id_usuario = :usuarioIdUsuario'.
	 */
	public ClienteEntidad[] findByUsuario(int usuarioIdUsuario) throws ClienteEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE usuario_id_usuario = ?", new Object[] {  new Integer(usuarioIdUsuario) } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'id_cliente = :idCliente'.
	 */
	public ClienteEntidad[] findWhereIdClienteEquals(int idCliente) throws ClienteEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE id_cliente = ? ORDER BY id_cliente", new Object[] {  new Integer(idCliente) } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'nombre = :nombre'.
	 */
	public ClienteEntidad[] findWhereNombreEquals(String nombre) throws ClienteEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE nombre = ? ORDER BY nombre", new Object[] { nombre } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'apellido1 = :apellido1'.
	 */
	public ClienteEntidad[] findWhereApellido1Equals(String apellido1) throws ClienteEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE apellido1 = ? ORDER BY apellido1", new Object[] { apellido1 } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'apellido2 = :apellido2'.
	 */
	public ClienteEntidad[] findWhereApellido2Equals(String apellido2) throws ClienteEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE apellido2 = ? ORDER BY apellido2", new Object[] { apellido2 } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'NIF = :nif'.
	 */
	public ClienteEntidad[] findWhereNifEquals(String nif) throws ClienteEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NIF = ? ORDER BY NIF", new Object[] { nif } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'direccion_completa = :direccionCompleta'.
	 */
	public ClienteEntidad[] findWhereDireccionCompletaEquals(String direccionCompleta) throws ClienteEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE direccion_completa = ? ORDER BY direccion_completa", new Object[] { direccionCompleta } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'fecha_creacion = :fechaCreacion'.
	 */
	public ClienteEntidad[] findWhereFechaCreacionEquals(Date fechaCreacion) throws ClienteEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_creacion = ? ORDER BY fecha_creacion", new Object[] { fechaCreacion==null ? null : new java.sql.Timestamp( fechaCreacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'fecha_modificacion = :fechaModificacion'.
	 */
	public ClienteEntidad[] findWhereFechaModificacionEquals(Date fechaModificacion) throws ClienteEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE fecha_modificacion = ? ORDER BY fecha_modificacion", new Object[] { fechaModificacion==null ? null : new java.sql.Timestamp( fechaModificacion.getTime() ) } );
	}

	/** 
	 * Returns all rows from the cliente table that match the criteria 'usuario_id_usuario = :usuarioIdUsuario'.
	 */
	public ClienteEntidad[] findWhereUsuarioIdUsuarioEquals(int usuarioIdUsuario) throws ClienteEntidadDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE usuario_id_usuario = ? ORDER BY usuario_id_usuario", new Object[] {  new Integer(usuarioIdUsuario) } );
	}

	/**
	 * Method 'ClienteEntidadDaoImpl'
	 * 
	 */
	public ClienteEntidadDaoImpl()
	{
	}

	/**
	 * Method 'ClienteEntidadDaoImpl'
	 * 
	 * @param userConn
	 */
	public ClienteEntidadDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "bankito.cliente";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ClienteEntidad fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ClienteEntidad dto = new ClienteEntidad();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ClienteEntidad[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ClienteEntidad dto = new ClienteEntidad();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ClienteEntidad ret[] = new ClienteEntidad[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ClienteEntidad dto, ResultSet rs) throws SQLException
	{
		dto.setIdCliente( rs.getInt( COLUMN_ID_CLIENTE ) );
		dto.setNombre( rs.getString( COLUMN_NOMBRE ) );
		dto.setApellido1( rs.getString( COLUMN_APELLIDO1 ) );
		dto.setApellido2( rs.getString( COLUMN_APELLIDO2 ) );
		dto.setNif( rs.getString( COLUMN_NIF ) );
		dto.setDireccionCompleta( rs.getString( COLUMN_DIRECCION_COMPLETA ) );
		dto.setFechaCreacion( rs.getTimestamp(COLUMN_FECHA_CREACION ) );
		dto.setFechaModificacion( rs.getTimestamp(COLUMN_FECHA_MODIFICACION ) );
		dto.setUsuarioIdUsuario( rs.getInt( COLUMN_USUARIO_ID_USUARIO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ClienteEntidad dto)
	{
	}

	/** 
	 * Returns all rows from the cliente table that match the specified arbitrary SQL statement
	 */
	public ClienteEntidad[] findByDynamicSelect(String sql, Object[] sqlParams) throws ClienteEntidadDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClienteEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the cliente table that match the specified arbitrary SQL statement
	 */
	public ClienteEntidad[] findByDynamicWhere(String sql, Object[] sqlParams) throws ClienteEntidadDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			//System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClienteEntidadDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
