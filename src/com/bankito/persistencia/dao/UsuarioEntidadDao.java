/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.bankito.persistencia.dao;

import java.util.Date;
import com.bankito.persistencia.dto.*;
import com.bankito.persistencia.exceptions.*;

public interface UsuarioEntidadDao
{
	/** 
	 * Inserts a new row in the usuario table.
	 */
	public UsuarioEntidadPk insert(UsuarioEntidad dto) throws UsuarioEntidadDaoException;

	/** 
	 * Updates a single row in the usuario table.
	 */
	public void update(UsuarioEntidadPk pk, UsuarioEntidad dto) throws UsuarioEntidadDaoException;

	/** 
	 * Deletes a single row in the usuario table.
	 */
	public void delete(UsuarioEntidadPk pk) throws UsuarioEntidadDaoException;

	/** 
	 * Returns the rows from the usuario table that matches the specified primary-key value.
	 */
	public UsuarioEntidad findByPrimaryKey(UsuarioEntidadPk pk) throws UsuarioEntidadDaoException;

	/** 
	 * Returns all rows from the usuario table that match the criteria 'id_usuario = :idUsuario'.
	 */
	public UsuarioEntidad findByPrimaryKey(int idUsuario) throws UsuarioEntidadDaoException;

	/** 
	 * Returns all rows from the usuario table that match the criteria ''.
	 */
	public UsuarioEntidad[] findAll() throws UsuarioEntidadDaoException;

	/** 
	 * Returns all rows from the usuario table that match the criteria 'perfil_usuario_id_perfil = :perfilUsuarioIdPerfil'.
	 */
	public UsuarioEntidad[] findByPerfilUsuario(int perfilUsuarioIdPerfil) throws UsuarioEntidadDaoException;

	/** 
	 * Returns all rows from the usuario table that match the criteria 'id_usuario = :idUsuario'.
	 */
	public UsuarioEntidad[] findWhereIdUsuarioEquals(int idUsuario) throws UsuarioEntidadDaoException;

	/** 
	 * Returns all rows from the usuario table that match the criteria 'nombre = :nombre'.
	 */
	public UsuarioEntidad[] findWhereNombreEquals(String nombre) throws UsuarioEntidadDaoException;

	/** 
	 * Returns all rows from the usuario table that match the criteria 'password = :password'.
	 */
	public UsuarioEntidad[] findWherePasswordEquals(String password) throws UsuarioEntidadDaoException;

	/** 
	 * Returns all rows from the usuario table that match the criteria 'fecha_creacion = :fechaCreacion'.
	 */
	public UsuarioEntidad[] findWhereFechaCreacionEquals(Date fechaCreacion) throws UsuarioEntidadDaoException;

	/** 
	 * Returns all rows from the usuario table that match the criteria 'fecha_modificacion = :fechaModificacion'.
	 */
	public UsuarioEntidad[] findWhereFechaModificacionEquals(Date fechaModificacion) throws UsuarioEntidadDaoException;

	/** 
	 * Returns all rows from the usuario table that match the criteria 'perfil_usuario_id_perfil = :perfilUsuarioIdPerfil'.
	 */
	public UsuarioEntidad[] findWherePerfilUsuarioIdPerfilEquals(int perfilUsuarioIdPerfil) throws UsuarioEntidadDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the usuario table that match the specified arbitrary SQL statement
	 */
	public UsuarioEntidad[] findByDynamicSelect(String sql, Object[] sqlParams) throws UsuarioEntidadDaoException;

	/** 
	 * Returns all rows from the usuario table that match the specified arbitrary SQL statement
	 */
	public UsuarioEntidad[] findByDynamicWhere(String sql, Object[] sqlParams) throws UsuarioEntidadDaoException;

}
