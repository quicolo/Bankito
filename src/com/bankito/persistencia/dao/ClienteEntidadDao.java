/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.bankito.persistencia.dao;

import java.util.Date;
import com.bankito.persistencia.dto.*;
import com.bankito.persistencia.exceptions.*;

public interface ClienteEntidadDao
{
	/** 
	 * Inserts a new row in the cliente table.
	 */
	public ClienteEntidadPk insert(ClienteEntidad dto) throws ClienteEntidadDaoException;

	/** 
	 * Updates a single row in the cliente table.
	 */
	public void update(ClienteEntidadPk pk, ClienteEntidad dto) throws ClienteEntidadDaoException;

	/** 
	 * Deletes a single row in the cliente table.
	 */
	public void delete(ClienteEntidadPk pk) throws ClienteEntidadDaoException;

	/** 
	 * Returns the rows from the cliente table that matches the specified primary-key value.
	 */
	public ClienteEntidad findByPrimaryKey(ClienteEntidadPk pk) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria 'id_cliente = :idCliente'.
	 */
	public ClienteEntidad findByPrimaryKey(int idCliente) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria ''.
	 */
	public ClienteEntidad[] findAll() throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria 'usuario_id_usuario = :usuarioIdUsuario'.
	 */
	public ClienteEntidad[] findByUsuario(int usuarioIdUsuario) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria 'id_cliente = :idCliente'.
	 */
	public ClienteEntidad[] findWhereIdClienteEquals(int idCliente) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria 'nombre = :nombre'.
	 */
	public ClienteEntidad[] findWhereNombreEquals(String nombre) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria 'apellido1 = :apellido1'.
	 */
	public ClienteEntidad[] findWhereApellido1Equals(String apellido1) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria 'apellido2 = :apellido2'.
	 */
	public ClienteEntidad[] findWhereApellido2Equals(String apellido2) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria 'NIF = :nif'.
	 */
	public ClienteEntidad[] findWhereNifEquals(String nif) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria 'direccion_completa = :direccionCompleta'.
	 */
	public ClienteEntidad[] findWhereDireccionCompletaEquals(String direccionCompleta) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria 'fecha_creacion = :fechaCreacion'.
	 */
	public ClienteEntidad[] findWhereFechaCreacionEquals(Date fechaCreacion) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria 'fecha_modificacion = :fechaModificacion'.
	 */
	public ClienteEntidad[] findWhereFechaModificacionEquals(Date fechaModificacion) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the criteria 'usuario_id_usuario = :usuarioIdUsuario'.
	 */
	public ClienteEntidad[] findWhereUsuarioIdUsuarioEquals(int usuarioIdUsuario) throws ClienteEntidadDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the cliente table that match the specified arbitrary SQL statement
	 */
	public ClienteEntidad[] findByDynamicSelect(String sql, Object[] sqlParams) throws ClienteEntidadDaoException;

	/** 
	 * Returns all rows from the cliente table that match the specified arbitrary SQL statement
	 */
	public ClienteEntidad[] findByDynamicWhere(String sql, Object[] sqlParams) throws ClienteEntidadDaoException;

}
