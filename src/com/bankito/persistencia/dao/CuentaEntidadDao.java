/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.bankito.persistencia.dao;

import java.util.Date;
import com.bankito.persistencia.dto.*;
import com.bankito.persistencia.exceptions.*;

public interface CuentaEntidadDao
{
	/** 
	 * Inserts a new row in the cuenta table.
	 */
	public CuentaEntidadPk insert(CuentaEntidad dto) throws CuentaEntidadDaoException;

	/** 
	 * Updates a single row in the cuenta table.
	 */
	public void update(CuentaEntidadPk pk, CuentaEntidad dto) throws CuentaEntidadDaoException;

	/** 
	 * Deletes a single row in the cuenta table.
	 */
	public void delete(CuentaEntidadPk pk) throws CuentaEntidadDaoException;

	/** 
	 * Returns the rows from the cuenta table that matches the specified primary-key value.
	 */
	public CuentaEntidad findByPrimaryKey(CuentaEntidadPk pk) throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'id_cuenta = :idCuenta'.
	 */
	public CuentaEntidad findByPrimaryKey(int idCuenta) throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria ''.
	 */
	public CuentaEntidad[] findAll() throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'usuario_id_usuario = :usuarioIdUsuario'.
	 */
	public CuentaEntidad[] findByUsuario(int usuarioIdUsuario) throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'id_cuenta = :idCuenta'.
	 */
	public CuentaEntidad[] findWhereIdCuentaEquals(int idCuenta) throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'num_entidad = :numEntidad'.
	 */
	public CuentaEntidad[] findWhereNumEntidadEquals(int numEntidad) throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'num_sucursal = :numSucursal'.
	 */
	public CuentaEntidad[] findWhereNumSucursalEquals(int numSucursal) throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'num_digito_control = :numDigitoControl'.
	 */
	public CuentaEntidad[] findWhereNumDigitoControlEquals(int numDigitoControl) throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'num_cuenta = :numCuenta'.
	 */
	public CuentaEntidad[] findWhereNumCuentaEquals(long numCuenta) throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'saldo = :saldo'.
	 */
	public CuentaEntidad[] findWhereSaldoEquals(float saldo) throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'fecha_creacion = :fechaCreacion'.
	 */
	public CuentaEntidad[] findWhereFechaCreacionEquals(Date fechaCreacion) throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the criteria 'usuario_id_usuario = :usuarioIdUsuario'.
	 */
	public CuentaEntidad[] findWhereUsuarioIdUsuarioEquals(int usuarioIdUsuario) throws CuentaEntidadDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the cuenta table that match the specified arbitrary SQL statement
	 */
	public CuentaEntidad[] findByDynamicSelect(String sql, Object[] sqlParams) throws CuentaEntidadDaoException;

	/** 
	 * Returns all rows from the cuenta table that match the specified arbitrary SQL statement
	 */
	public CuentaEntidad[] findByDynamicWhere(String sql, Object[] sqlParams) throws CuentaEntidadDaoException;

}
