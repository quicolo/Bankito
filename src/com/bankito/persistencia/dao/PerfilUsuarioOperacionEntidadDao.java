/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.bankito.persistencia.dao;

import com.bankito.persistencia.dto.*;
import com.bankito.persistencia.exceptions.*;

public interface PerfilUsuarioOperacionEntidadDao
{
	/** 
	 * Inserts a new row in the perfil_usuario_operacion table.
	 */
	public PerfilUsuarioOperacionEntidadPk insert(PerfilUsuarioOperacionEntidad dto) throws PerfilUsuarioOperacionEntidadDaoException;

	/** 
	 * Updates a single row in the perfil_usuario_operacion table.
	 */
	public void update(PerfilUsuarioOperacionEntidadPk pk, PerfilUsuarioOperacionEntidad dto) throws PerfilUsuarioOperacionEntidadDaoException;

	/** 
	 * Deletes a single row in the perfil_usuario_operacion table.
	 */
	public void delete(PerfilUsuarioOperacionEntidadPk pk) throws PerfilUsuarioOperacionEntidadDaoException;

	/** 
	 * Returns the rows from the perfil_usuario_operacion table that matches the specified primary-key value.
	 */
	public PerfilUsuarioOperacionEntidad findByPrimaryKey(PerfilUsuarioOperacionEntidadPk pk) throws PerfilUsuarioOperacionEntidadDaoException;

	/** 
	 * Returns all rows from the perfil_usuario_operacion table that match the criteria 'perfil_usuario_id_perfil = :perfilUsuarioIdPerfil AND operacion_id_operacion = :operacionIdOperacion'.
	 */
	public PerfilUsuarioOperacionEntidad findByPrimaryKey(int perfilUsuarioIdPerfil, int operacionIdOperacion) throws PerfilUsuarioOperacionEntidadDaoException;

	/** 
	 * Returns all rows from the perfil_usuario_operacion table that match the criteria ''.
	 */
	public PerfilUsuarioOperacionEntidad[] findAll() throws PerfilUsuarioOperacionEntidadDaoException;

	/** 
	 * Returns all rows from the perfil_usuario_operacion table that match the criteria 'operacion_id_operacion = :operacionIdOperacion'.
	 */
	public PerfilUsuarioOperacionEntidad[] findByOperacion(int operacionIdOperacion) throws PerfilUsuarioOperacionEntidadDaoException;

	/** 
	 * Returns all rows from the perfil_usuario_operacion table that match the criteria 'perfil_usuario_id_perfil = :perfilUsuarioIdPerfil'.
	 */
	public PerfilUsuarioOperacionEntidad[] findByPerfilUsuario(int perfilUsuarioIdPerfil) throws PerfilUsuarioOperacionEntidadDaoException;

	/** 
	 * Returns all rows from the perfil_usuario_operacion table that match the criteria 'perfil_usuario_id_perfil = :perfilUsuarioIdPerfil'.
	 */
	public PerfilUsuarioOperacionEntidad[] findWherePerfilUsuarioIdPerfilEquals(int perfilUsuarioIdPerfil) throws PerfilUsuarioOperacionEntidadDaoException;

	/** 
	 * Returns all rows from the perfil_usuario_operacion table that match the criteria 'operacion_id_operacion = :operacionIdOperacion'.
	 */
	public PerfilUsuarioOperacionEntidad[] findWhereOperacionIdOperacionEquals(int operacionIdOperacion) throws PerfilUsuarioOperacionEntidadDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the perfil_usuario_operacion table that match the specified arbitrary SQL statement
	 */
	public PerfilUsuarioOperacionEntidad[] findByDynamicSelect(String sql, Object[] sqlParams) throws PerfilUsuarioOperacionEntidadDaoException;

	/** 
	 * Returns all rows from the perfil_usuario_operacion table that match the specified arbitrary SQL statement
	 */
	public PerfilUsuarioOperacionEntidad[] findByDynamicWhere(String sql, Object[] sqlParams) throws PerfilUsuarioOperacionEntidadDaoException;

}
