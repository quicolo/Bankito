/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.bankito.persistencia.dao;

import java.util.Date;
import com.bankito.persistencia.dto.*;
import com.bankito.persistencia.exceptions.*;

public interface MovimientoEntidadDao
{
	/** 
	 * Inserts a new row in the movimiento table.
	 */
	public MovimientoEntidadPk insert(MovimientoEntidad dto) throws MovimientoEntidadDaoException;

	/** 
	 * Updates a single row in the movimiento table.
	 */
	public void update(MovimientoEntidadPk pk, MovimientoEntidad dto) throws MovimientoEntidadDaoException;

	/** 
	 * Deletes a single row in the movimiento table.
	 */
	public void delete(MovimientoEntidadPk pk) throws MovimientoEntidadDaoException;

	/** 
	 * Returns the rows from the movimiento table that matches the specified primary-key value.
	 */
	public MovimientoEntidad findByPrimaryKey(MovimientoEntidadPk pk) throws MovimientoEntidadDaoException;

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'id_movimiento = :idMovimiento'.
	 */
	public MovimientoEntidad findByPrimaryKey(int idMovimiento) throws MovimientoEntidadDaoException;

	/** 
	 * Returns all rows from the movimiento table that match the criteria ''.
	 */
	public MovimientoEntidad[] findAll() throws MovimientoEntidadDaoException;

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'cuenta_id_cuenta = :cuentaIdCuenta'.
	 */
	public MovimientoEntidad[] findByCuenta(int cuentaIdCuenta) throws MovimientoEntidadDaoException;

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'id_movimiento = :idMovimiento'.
	 */
	public MovimientoEntidad[] findWhereIdMovimientoEquals(int idMovimiento) throws MovimientoEntidadDaoException;

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'concepto = :concepto'.
	 */
	public MovimientoEntidad[] findWhereConceptoEquals(String concepto) throws MovimientoEntidadDaoException;

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'tipo = :tipo'.
	 */
	public MovimientoEntidad[] findWhereTipoEquals(String tipo) throws MovimientoEntidadDaoException;

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'importe = :importe'.
	 */
	public MovimientoEntidad[] findWhereImporteEquals(float importe) throws MovimientoEntidadDaoException;

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'fecha_creacion = :fechaCreacion'.
	 */
	public MovimientoEntidad[] findWhereFechaCreacionEquals(Date fechaCreacion) throws MovimientoEntidadDaoException;

	/** 
	 * Returns all rows from the movimiento table that match the criteria 'cuenta_id_cuenta = :cuentaIdCuenta'.
	 */
	public MovimientoEntidad[] findWhereCuentaIdCuentaEquals(int cuentaIdCuenta) throws MovimientoEntidadDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the movimiento table that match the specified arbitrary SQL statement
	 */
	public MovimientoEntidad[] findByDynamicSelect(String sql, Object[] sqlParams) throws MovimientoEntidadDaoException;

	/** 
	 * Returns all rows from the movimiento table that match the specified arbitrary SQL statement
	 */
	public MovimientoEntidad[] findByDynamicWhere(String sql, Object[] sqlParams) throws MovimientoEntidadDaoException;

}
